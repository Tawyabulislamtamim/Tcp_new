{"ast":null,"code":"var _jsxFileName = \"D:\\\\Tawyabul Islam Tamim\\\\3-1\\\\computer networking\\\\project\\\\tcp-file-transfer\\\\tcp-file-transfer\\\\frontend\\\\src\\\\components\\\\ControlPanel\\\\ControlPanel.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './ControlPanel.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ControlPanel = () => {\n  _s();\n  const [demoMode, setDemoMode] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [message, setMessage] = useState('');\n  useEffect(() => {\n    fetchDemoModeStatus();\n  }, []);\n  const fetchDemoModeStatus = async () => {\n    try {\n      const response = await fetch('/api/files/config/demo-mode');\n      const data = await response.json();\n      setDemoMode(data.demo_mode);\n    } catch (error) {\n      console.error('Failed to fetch demo mode status:', error);\n    }\n  };\n  const toggleDemoMode = async () => {\n    setIsLoading(true);\n    setMessage('');\n    try {\n      const response = await fetch('/api/files/config/demo-mode', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          demo_mode: !demoMode\n        })\n      });\n      const data = await response.json();\n      if (response.ok) {\n        setDemoMode(data.demo_mode);\n        setMessage(data.message);\n      } else {\n        setMessage(`Error: ${data.error}`);\n      }\n    } catch (error) {\n      setMessage(`Error: ${error.message}`);\n    } finally {\n      setIsLoading(false);\n\n      // Clear message after 3 seconds\n      setTimeout(() => {\n        setMessage('');\n      }, 3000);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"control-panel-row\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"connection-types-box\",\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"\\uD83D\\uDCCA Connection Types\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: [/*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"connection-type demo\",\n            children: \"\\uD83C\\uDFAD Demo\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 11\n          }, this), \" - Simulated connections for testing TCP algorithms\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"connection-type real\",\n            children: \"\\uD83D\\uDE80 Real\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 11\n          }, this), \" - Actual file transfers and uploads\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"demo-toggle-box\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"toggle-info\",\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"Demo Mode\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: demoMode ? \"Simulated connections are active for demonstration\" : \"Only real file transfers will show connections\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"toggle-switch\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\",\n          checked: demoMode,\n          onChange: toggleDemoMode,\n          disabled: isLoading\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"toggle-slider\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 3\n  }, this);\n};\n_s(ControlPanel, \"h8Tj8KIs3+k9qwNolEnoaKFBy6o=\");\n_c = ControlPanel;\nexport default ControlPanel;\nvar _c;\n$RefreshReg$(_c, \"ControlPanel\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","ControlPanel","_s","demoMode","setDemoMode","isLoading","setIsLoading","message","setMessage","fetchDemoModeStatus","response","fetch","data","json","demo_mode","error","console","toggleDemoMode","method","headers","body","JSON","stringify","ok","setTimeout","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","checked","onChange","disabled","_c","$RefreshReg$"],"sources":["D:/Tawyabul Islam Tamim/3-1/computer networking/project/tcp-file-transfer/tcp-file-transfer/frontend/src/components/ControlPanel/ControlPanel.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport './ControlPanel.css';\r\n\r\nconst ControlPanel = () => {\r\n    const [demoMode, setDemoMode] = useState(false);\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [message, setMessage] = useState('');\r\n\r\n    useEffect(() => {\r\n        fetchDemoModeStatus();\r\n    }, []);\r\n\r\n    const fetchDemoModeStatus = async () => {\r\n        try {\r\n            const response = await fetch('/api/files/config/demo-mode');\r\n            const data = await response.json();\r\n            setDemoMode(data.demo_mode);\r\n        } catch (error) {\r\n            console.error('Failed to fetch demo mode status:', error);\r\n        }\r\n    };\r\n\r\n    const toggleDemoMode = async () => {\r\n        setIsLoading(true);\r\n        setMessage('');\r\n\r\n        try {\r\n            const response = await fetch('/api/files/config/demo-mode', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify({\r\n                    demo_mode: !demoMode\r\n                })\r\n            });\r\n\r\n            const data = await response.json();\r\n            if (response.ok) {\r\n                setDemoMode(data.demo_mode);\r\n                setMessage(data.message);\r\n            } else {\r\n                setMessage(`Error: ${data.error}`);\r\n            }\r\n        } catch (error) {\r\n            setMessage(`Error: ${error.message}`);\r\n        } finally {\r\n            setIsLoading(false);\r\n            \r\n            // Clear message after 3 seconds\r\n            setTimeout(() => {\r\n                setMessage('');\r\n            }, 3000);\r\n        }\r\n    };\r\n\r\n   return (\r\n  <div className=\"control-panel-row\">\r\n    <div className=\"connection-types-box\">\r\n      <h4>ðŸ“Š Connection Types</h4>\r\n      <ul>\r\n        <li>\r\n          <span className=\"connection-type demo\">ðŸŽ­ Demo</span> - Simulated connections for testing TCP algorithms\r\n        </li>\r\n        <li>\r\n          <span className=\"connection-type real\">ðŸš€ Real</span> - Actual file transfers and uploads\r\n        </li>\r\n      </ul>\r\n    </div>\r\n\r\n    <div className=\"demo-toggle-box\">\r\n      <div className=\"toggle-info\">\r\n        <h4>Demo Mode</h4>\r\n        <p>\r\n          {demoMode\r\n            ? \"Simulated connections are active for demonstration\"\r\n            : \"Only real file transfers will show connections\"}\r\n        </p>\r\n      </div>\r\n      <label className=\"toggle-switch\">\r\n        <input\r\n          type=\"checkbox\"\r\n          checked={demoMode}\r\n          onChange={toggleDemoMode}\r\n          disabled={isLoading}\r\n        />\r\n        <span className=\"toggle-slider\"></span>\r\n      </label>\r\n    </div>\r\n  </div>\r\n);\r\n\r\n\r\n};\r\n\r\nexport default ControlPanel;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}