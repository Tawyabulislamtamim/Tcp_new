{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './ControlPanel.css';\nconst ControlPanel = () => {\n  _s();\n  const [demoMode, setDemoMode] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [message, setMessage] = useState('');\n  useEffect(() => {\n    fetchDemoModeStatus();\n  }, []);\n  const fetchDemoModeStatus = async () => {\n    try {\n      const response = await fetch('/api/files/config/demo-mode');\n      const data = await response.json();\n      setDemoMode(data.demo_mode);\n    } catch (error) {\n      console.error('Failed to fetch demo mode status:', error);\n    }\n  };\n  const toggleDemoMode = async () => {\n    setIsLoading(true);\n    setMessage('');\n    try {\n      const response = await fetch('/api/files/config/demo-mode', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          demo_mode: !demoMode\n        })\n      });\n      const data = await response.json();\n      if (response.ok) {\n        setDemoMode(data.demo_mode);\n        setMessage(data.message);\n      } else {\n        setMessage(`Error: ${data.error}`);\n      }\n    } catch (error) {\n      setMessage(`Error: ${error.message}`);\n    } finally {\n      setIsLoading(false);\n\n      // Clear message after 3 seconds\n      setTimeout(() => {\n        setMessage('');\n      }, 3000);\n    }\n  };\n};\n_s(ControlPanel, \"h8Tj8KIs3+k9qwNolEnoaKFBy6o=\");\n_c = ControlPanel;\nexport default ControlPanel;\nvar _c;\n$RefreshReg$(_c, \"ControlPanel\");","map":{"version":3,"names":["React","useState","useEffect","ControlPanel","_s","demoMode","setDemoMode","isLoading","setIsLoading","message","setMessage","fetchDemoModeStatus","response","fetch","data","json","demo_mode","error","console","toggleDemoMode","method","headers","body","JSON","stringify","ok","setTimeout","_c","$RefreshReg$"],"sources":["D:/Tawyabul Islam Tamim/3-1/computer networking/project/tcp-file-transfer/tcp-file-transfer/frontend/src/components/ControlPanel/ControlPanel.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport './ControlPanel.css';\r\n\r\nconst ControlPanel = () => {\r\n    const [demoMode, setDemoMode] = useState(false);\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [message, setMessage] = useState('');\r\n\r\n    useEffect(() => {\r\n        fetchDemoModeStatus();\r\n    }, []);\r\n\r\n    const fetchDemoModeStatus = async () => {\r\n        try {\r\n            const response = await fetch('/api/files/config/demo-mode');\r\n            const data = await response.json();\r\n            setDemoMode(data.demo_mode);\r\n        } catch (error) {\r\n            console.error('Failed to fetch demo mode status:', error);\r\n        }\r\n    };\r\n\r\n    const toggleDemoMode = async () => {\r\n        setIsLoading(true);\r\n        setMessage('');\r\n\r\n        try {\r\n            const response = await fetch('/api/files/config/demo-mode', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify({\r\n                    demo_mode: !demoMode\r\n                })\r\n            });\r\n\r\n            const data = await response.json();\r\n            if (response.ok) {\r\n                setDemoMode(data.demo_mode);\r\n                setMessage(data.message);\r\n            } else {\r\n                setMessage(`Error: ${data.error}`);\r\n            }\r\n        } catch (error) {\r\n            setMessage(`Error: ${error.message}`);\r\n        } finally {\r\n            setIsLoading(false);\r\n            \r\n            // Clear message after 3 seconds\r\n            setTimeout(() => {\r\n                setMessage('');\r\n            }, 3000);\r\n        }\r\n    };\r\n\r\n   \r\n};\r\n\r\nexport default ControlPanel;\r\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAO,oBAAoB;AAE3B,MAAMC,YAAY,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACvB,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGL,QAAQ,CAAC,KAAK,CAAC;EAC/C,MAAM,CAACM,SAAS,EAAEC,YAAY,CAAC,GAAGP,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAACQ,OAAO,EAAEC,UAAU,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAE1CC,SAAS,CAAC,MAAM;IACZS,mBAAmB,CAAC,CAAC;EACzB,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMA,mBAAmB,GAAG,MAAAA,CAAA,KAAY;IACpC,IAAI;MACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,6BAA6B,CAAC;MAC3D,MAAMC,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;MAClCT,WAAW,CAACQ,IAAI,CAACE,SAAS,CAAC;IAC/B,CAAC,CAAC,OAAOC,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,mCAAmC,EAAEA,KAAK,CAAC;IAC7D;EACJ,CAAC;EAED,MAAME,cAAc,GAAG,MAAAA,CAAA,KAAY;IAC/BX,YAAY,CAAC,IAAI,CAAC;IAClBE,UAAU,CAAC,EAAE,CAAC;IAEd,IAAI;MACA,MAAME,QAAQ,GAAG,MAAMC,KAAK,CAAC,6BAA6B,EAAE;QACxDO,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACL,cAAc,EAAE;QACpB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UACjBR,SAAS,EAAE,CAACX;QAChB,CAAC;MACL,CAAC,CAAC;MAEF,MAAMS,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;MAClC,IAAIH,QAAQ,CAACa,EAAE,EAAE;QACbnB,WAAW,CAACQ,IAAI,CAACE,SAAS,CAAC;QAC3BN,UAAU,CAACI,IAAI,CAACL,OAAO,CAAC;MAC5B,CAAC,MAAM;QACHC,UAAU,CAAC,UAAUI,IAAI,CAACG,KAAK,EAAE,CAAC;MACtC;IACJ,CAAC,CAAC,OAAOA,KAAK,EAAE;MACZP,UAAU,CAAC,UAAUO,KAAK,CAACR,OAAO,EAAE,CAAC;IACzC,CAAC,SAAS;MACND,YAAY,CAAC,KAAK,CAAC;;MAEnB;MACAkB,UAAU,CAAC,MAAM;QACbhB,UAAU,CAAC,EAAE,CAAC;MAClB,CAAC,EAAE,IAAI,CAAC;IACZ;EACJ,CAAC;AAGL,CAAC;AAACN,EAAA,CAtDID,YAAY;AAAAwB,EAAA,GAAZxB,YAAY;AAwDlB,eAAeA,YAAY;AAAC,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}