{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\iamov\\\\Desktop\\\\Net\\\\New folder\\\\tcp-file-transfer\\\\frontend\\\\src\\\\components\\\\MetricsDashboard\\\\MetricsDashboard.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useMetrics } from '../../hooks/useMetrics';\nimport CongestionGraph from './CongestionGraph';\nimport NetworkStats from './NetworkStats';\nimport metricsService from '../../services/metricsService';\nimport './MetricsDashboard.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MetricsDashboard = ({\n  onMetricsUpdate\n}) => {\n  _s();\n  const [globalMetrics, setGlobalMetrics] = useState(null);\n  const [metricsHistory, setMetricsHistory] = useState([]);\n  const [selectedTimespan, setSelectedTimespan] = useState(30);\n  const [isConnected, setIsConnected] = useState(false);\n  const [error, setError] = useState(null);\n\n  // Fetch global metrics\n  const {\n    metrics: fetchedGlobalMetrics,\n    isLoading,\n    error: fetchError\n  } = useMetrics(null, 2000);\n  useEffect(() => {\n    if (fetchedGlobalMetrics) {\n      setGlobalMetrics(fetchedGlobalMetrics);\n      setError(null);\n    }\n    if (fetchError) {\n      setError(fetchError);\n    }\n  }, [fetchedGlobalMetrics, fetchError]);\n\n  // Fetch metrics history\n  useEffect(() => {\n    const fetchHistory = async () => {\n      try {\n        const history = await metricsService.getMetricsHistory(selectedTimespan);\n        setMetricsHistory(history);\n      } catch (err) {\n        console.error('Failed to fetch metrics history:', err);\n      }\n    };\n    fetchHistory();\n    const interval = setInterval(fetchHistory, 3000); // Update every 3 seconds\n\n    return () => clearInterval(interval);\n  }, [selectedTimespan]);\n\n  // Subscribe to real-time metrics updates\n  useEffect(() => {\n    const unsubscribe = metricsService.subscribeToMetrics(data => {\n      if (data.error) {\n        setError(data.error);\n        setIsConnected(false);\n      } else {\n        setGlobalMetrics(data);\n        setIsConnected(true);\n        setError(null);\n      }\n    });\n    return unsubscribe;\n  }, []);\n  const handleTimespanChange = newTimespan => {\n    setSelectedTimespan(newTimespan);\n  };\n  if (isLoading && !globalMetrics) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"metrics-dashboard loading\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading-spinner\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading metrics...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"metrics-dashboard\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dashboard-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Network Metrics Dashboard\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"connection-status\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: `status-indicator ${isConnected ? 'connected' : 'disconnected'}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: isConnected ? 'Live' : 'Disconnected'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error-banner\",\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        children: [\"\\u26A0\\uFE0F \", error]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dashboard-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"stats-section\",\n        children: /*#__PURE__*/_jsxDEV(NetworkStats, {\n          metrics: globalMetrics\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"timespan-selector\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"View Last:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 21\n        }, this), [30, 60, 120, 300].map(seconds => /*#__PURE__*/_jsxDEV(\"button\", {\n          className: selectedTimespan === seconds ? 'active' : '',\n          onClick: () => handleTimespanChange(seconds),\n          children: seconds < 60 ? `${seconds}s` : `${seconds / 60}m`\n        }, seconds, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 25\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"graph-section\",\n        children: /*#__PURE__*/_jsxDEV(CongestionGraph, {\n          data: metricsHistory,\n          timespan: selectedTimespan\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 17\n      }, this), globalMetrics && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"additional-stats\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"stat-card\",\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            children: \"Total Data Transferred\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: formatBytes(globalMetrics.total_bytes_transferred || 0)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"stat-card\",\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            children: \"Average RTT\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [(globalMetrics.average_rtt || 0).toFixed(2), \" ms\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"stat-card\",\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            children: \"Total Packet Loss\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 130,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [(globalMetrics.total_packet_loss || 0).toFixed(4), \"%\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 131,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"stat-card\",\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            children: \"Current Bandwidth\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: formatBandwidth(globalMetrics.total_bandwidth || 0)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 9\n  }, this);\n};\n\n// Utility functions\n_s(MetricsDashboard, \"1zNf06bLFB7Grtq0hKPYpuVBWSQ=\", false, function () {\n  return [useMetrics];\n});\n_c = MetricsDashboard;\nconst formatBytes = bytes => {\n  if (bytes === 0) return '0 B';\n  const k = 1024;\n  const sizes = ['B', 'KB', 'MB', 'GB'];\n  const i = Math.floor(Math.log(bytes) / Math.log(k));\n  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n};\nconst formatBandwidth = bytesPerSec => {\n  if (bytesPerSec === 0) return '0 B/s';\n  const k = 1024;\n  const sizes = ['B/s', 'KB/s', 'MB/s', 'GB/s'];\n  const i = Math.floor(Math.log(bytesPerSec) / Math.log(k));\n  return parseFloat((bytesPerSec / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n};\nexport default MetricsDashboard;\nvar _c;\n$RefreshReg$(_c, \"MetricsDashboard\");","map":{"version":3,"names":["React","useState","useEffect","useMetrics","CongestionGraph","NetworkStats","metricsService","jsxDEV","_jsxDEV","MetricsDashboard","onMetricsUpdate","_s","globalMetrics","setGlobalMetrics","metricsHistory","setMetricsHistory","selectedTimespan","setSelectedTimespan","isConnected","setIsConnected","error","setError","metrics","fetchedGlobalMetrics","isLoading","fetchError","fetchHistory","history","getMetricsHistory","err","console","interval","setInterval","clearInterval","unsubscribe","subscribeToMetrics","data","handleTimespanChange","newTimespan","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","seconds","onClick","timespan","formatBytes","total_bytes_transferred","average_rtt","toFixed","total_packet_loss","formatBandwidth","total_bandwidth","_c","bytes","k","sizes","i","Math","floor","log","parseFloat","pow","bytesPerSec","$RefreshReg$"],"sources":["C:/Users/iamov/Desktop/Net/New folder/tcp-file-transfer/frontend/src/components/MetricsDashboard/MetricsDashboard.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useMetrics } from '../../hooks/useMetrics';\r\nimport CongestionGraph from './CongestionGraph';\r\nimport NetworkStats from './NetworkStats';\r\nimport metricsService from '../../services/metricsService';\r\nimport './MetricsDashboard.css';\r\n\r\nconst MetricsDashboard = ({ onMetricsUpdate }) => {\r\n    const [globalMetrics, setGlobalMetrics] = useState(null);\r\n    const [metricsHistory, setMetricsHistory] = useState([]);\r\n    const [selectedTimespan, setSelectedTimespan] = useState(30);\r\n    const [isConnected, setIsConnected] = useState(false);\r\n    const [error, setError] = useState(null);\r\n\r\n    // Fetch global metrics\r\n    const { metrics: fetchedGlobalMetrics, isLoading, error: fetchError } = useMetrics(null, 2000);\r\n\r\n    useEffect(() => {\r\n        if (fetchedGlobalMetrics) {\r\n            setGlobalMetrics(fetchedGlobalMetrics);\r\n            setError(null);\r\n        }\r\n        if (fetchError) {\r\n            setError(fetchError);\r\n        }\r\n    }, [fetchedGlobalMetrics, fetchError]);\r\n\r\n    // Fetch metrics history\r\n    useEffect(() => {\r\n        const fetchHistory = async () => {\r\n            try {\r\n                const history = await metricsService.getMetricsHistory(selectedTimespan);\r\n                setMetricsHistory(history);\r\n            } catch (err) {\r\n                console.error('Failed to fetch metrics history:', err);\r\n            }\r\n        };\r\n\r\n        fetchHistory();\r\n        const interval = setInterval(fetchHistory, 3000); // Update every 3 seconds\r\n\r\n        return () => clearInterval(interval);\r\n    }, [selectedTimespan]);\r\n\r\n    // Subscribe to real-time metrics updates\r\n    useEffect(() => {\r\n        const unsubscribe = metricsService.subscribeToMetrics((data) => {\r\n            if (data.error) {\r\n                setError(data.error);\r\n                setIsConnected(false);\r\n            } else {\r\n                setGlobalMetrics(data);\r\n                setIsConnected(true);\r\n                setError(null);\r\n            }\r\n        });\r\n\r\n        return unsubscribe;\r\n    }, []);\r\n\r\n    const handleTimespanChange = (newTimespan) => {\r\n        setSelectedTimespan(newTimespan);\r\n    };\r\n\r\n    if (isLoading && !globalMetrics) {\r\n        return (\r\n            <div className=\"metrics-dashboard loading\">\r\n                <div className=\"loading-spinner\"></div>\r\n                <p>Loading metrics...</p>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div className=\"metrics-dashboard\">\r\n            <div className=\"dashboard-header\">\r\n                <h2>Network Metrics Dashboard</h2>\r\n                <div className=\"connection-status\">\r\n                    <span className={`status-indicator ${isConnected ? 'connected' : 'disconnected'}`}></span>\r\n                    <span>{isConnected ? 'Live' : 'Disconnected'}</span>\r\n                </div>\r\n            </div>\r\n\r\n            {error && (\r\n                <div className=\"error-banner\">\r\n                    <span>⚠️ {error}</span>\r\n                </div>\r\n            )}\r\n\r\n            <div className=\"dashboard-content\">\r\n                {/* Global Network Stats */}\r\n                <div className=\"stats-section\">\r\n                    <NetworkStats metrics={globalMetrics} />\r\n                </div>\r\n\r\n                {/* Time Range Selector */}\r\n                <div className=\"timespan-selector\">\r\n                    <label>View Last:</label>\r\n                    {[30, 60, 120, 300].map(seconds => (\r\n                        <button\r\n                            key={seconds}\r\n                            className={selectedTimespan === seconds ? 'active' : ''}\r\n                            onClick={() => handleTimespanChange(seconds)}\r\n                        >\r\n                            {seconds < 60 ? `${seconds}s` : `${seconds / 60}m`}\r\n                        </button>\r\n                    ))}\r\n                </div>\r\n\r\n                {/* Congestion Control Graph */}\r\n                <div className=\"graph-section\">\r\n                    <CongestionGraph \r\n                        data={metricsHistory} \r\n                        timespan={selectedTimespan}\r\n                    />\r\n                </div>\r\n\r\n                {/* Additional Statistics */}\r\n                {globalMetrics && (\r\n                    <div className=\"additional-stats\">\r\n                        <div className=\"stat-card\">\r\n                            <h4>Total Data Transferred</h4>\r\n                            <p>{formatBytes(globalMetrics.total_bytes_transferred || 0)}</p>\r\n                        </div>\r\n                        <div className=\"stat-card\">\r\n                            <h4>Average RTT</h4>\r\n                            <p>{(globalMetrics.average_rtt || 0).toFixed(2)} ms</p>\r\n                        </div>\r\n                        <div className=\"stat-card\">\r\n                            <h4>Total Packet Loss</h4>\r\n                            <p>{(globalMetrics.total_packet_loss || 0).toFixed(4)}%</p>\r\n                        </div>\r\n                        <div className=\"stat-card\">\r\n                            <h4>Current Bandwidth</h4>\r\n                            <p>{formatBandwidth(globalMetrics.total_bandwidth || 0)}</p>\r\n                        </div>\r\n                    </div>\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\n// Utility functions\r\nconst formatBytes = (bytes) => {\r\n    if (bytes === 0) return '0 B';\r\n    const k = 1024;\r\n    const sizes = ['B', 'KB', 'MB', 'GB'];\r\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\r\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\r\n};\r\n\r\nconst formatBandwidth = (bytesPerSec) => {\r\n    if (bytesPerSec === 0) return '0 B/s';\r\n    const k = 1024;\r\n    const sizes = ['B/s', 'KB/s', 'MB/s', 'GB/s'];\r\n    const i = Math.floor(Math.log(bytesPerSec) / Math.log(k));\r\n    return parseFloat((bytesPerSec / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\r\n};\r\n\r\nexport default MetricsDashboard;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}