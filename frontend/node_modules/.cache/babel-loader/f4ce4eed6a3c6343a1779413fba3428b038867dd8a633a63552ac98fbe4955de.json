{"ast":null,"code":"var _jsxFileName = \"D:\\\\Tawyabul Islam Tamim\\\\3-1\\\\computer networking\\\\project\\\\tcp-file-transfer\\\\tcp-file-transfer\\\\frontend\\\\src\\\\components\\\\MetricsDashboard\\\\NetworkStats.jsx\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NetworkStats = ({\n  metrics\n}) => {\n  if (!metrics) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"network-stats loading\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Network Statistics\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 7,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading statistics...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 8,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 6,\n      columnNumber: 13\n    }, this);\n  }\n  const stats = [{\n    label: 'Active Connections',\n    value: metrics.active_connections || 0,\n    unit: '',\n    icon: 'üîó',\n    color: 'blue',\n    detail: `Demo: ${metrics.demo_connections || 0}, Real: ${metrics.real_connections || 0}`\n  }, {\n    label: 'Real Transfers',\n    value: metrics.real_connections || 0,\n    unit: '',\n    icon: 'üöÄ',\n    color: 'green',\n    detail: 'Active file transfers'\n  }, {\n    label: 'Demo Connections',\n    value: metrics.demo_connections || 0,\n    unit: '',\n    icon: 'üé≠',\n    color: 'gray',\n    detail: 'Simulated for testing'\n  }, {\n    label: 'Total Bandwidth',\n    value: formatBandwidth(metrics.total_bandwidth || 0),\n    unit: '',\n    icon: 'üìä',\n    color: 'purple'\n  }, {\n    label: 'Average RTT',\n    value: (metrics.average_rtt || 0).toFixed(2),\n    unit: 'ms',\n    icon: '‚è±Ô∏è',\n    color: 'orange'\n  }, {\n    label: 'Data Transferred',\n    value: formatBytes(metrics.total_bytes_transferred || 0),\n    unit: '',\n    icon: 'üíæ',\n    color: 'teal'\n  }];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"network-stats\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Network Statistics\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"stats-grid\",\n      children: stats.map((stat, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `stat-item ${stat.color}`,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"stat-icon\",\n          children: stat.icon\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"stat-content\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"stat-value\",\n            children: [stat.value, stat.unit && /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"stat-unit\",\n              children: stat.unit\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 71,\n              columnNumber: 47\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"stat-label\",\n            children: stat.label\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 29\n          }, this), stat.detail && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"stat-detail\",\n            children: stat.detail\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 45\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 25\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"real-time-indicator\",\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"pulse-dot\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"Real-time updates\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"small\", {\n        children: [\"Last updated: \", new Date().toLocaleTimeString()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 9\n  }, this);\n};\n\n// Utility functions\n_c = NetworkStats;\nconst formatBytes = bytes => {\n  if (bytes === 0) return '0 B';\n  const k = 1024;\n  const sizes = ['B', 'KB', 'MB', 'GB', 'TB'];\n  const i = Math.floor(Math.log(bytes) / Math.log(k));\n  return parseFloat((bytes / Math.pow(k, i)).toFixed(1)) + ' ' + sizes[i];\n};\nconst formatBandwidth = bytesPerSec => {\n  if (bytesPerSec === 0) return '0 B/s';\n  const k = 1024;\n  const sizes = ['B/s', 'KB/s', 'MB/s', 'GB/s'];\n  const i = Math.floor(Math.log(bytesPerSec) / Math.log(k));\n  return parseFloat((bytesPerSec / Math.pow(k, i)).toFixed(1)) + ' ' + sizes[i];\n};\nexport default NetworkStats;\nvar _c;\n$RefreshReg$(_c, \"NetworkStats\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","NetworkStats","metrics","className","children","fileName","_jsxFileName","lineNumber","columnNumber","stats","label","value","active_connections","unit","icon","color","detail","demo_connections","real_connections","formatBandwidth","total_bandwidth","average_rtt","toFixed","formatBytes","total_bytes_transferred","map","stat","index","Date","toLocaleTimeString","_c","bytes","k","sizes","i","Math","floor","log","parseFloat","pow","bytesPerSec","$RefreshReg$"],"sources":["D:/Tawyabul Islam Tamim/3-1/computer networking/project/tcp-file-transfer/tcp-file-transfer/frontend/src/components/MetricsDashboard/NetworkStats.jsx"],"sourcesContent":["import React from 'react';\r\n\r\nconst NetworkStats = ({ metrics }) => {\r\n    if (!metrics) {\r\n        return (\r\n            <div className=\"network-stats loading\">\r\n                <h3>Network Statistics</h3>\r\n                <p>Loading statistics...</p>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    const stats = [\r\n        {\r\n            label: 'Active Connections',\r\n            value: metrics.active_connections || 0,\r\n            unit: '',\r\n            icon: 'üîó',\r\n            color: 'blue',\r\n            detail: `Demo: ${metrics.demo_connections || 0}, Real: ${metrics.real_connections || 0}`\r\n        },\r\n        {\r\n            label: 'Real Transfers',\r\n            value: metrics.real_connections || 0,\r\n            unit: '',\r\n            icon: 'üöÄ',\r\n            color: 'green',\r\n            detail: 'Active file transfers'\r\n        },\r\n        {\r\n            label: 'Demo Connections',\r\n            value: metrics.demo_connections || 0,\r\n            unit: '',\r\n            icon: 'üé≠',\r\n            color: 'gray',\r\n            detail: 'Simulated for testing'\r\n        },\r\n        {\r\n            label: 'Total Bandwidth',\r\n            value: formatBandwidth(metrics.total_bandwidth || 0),\r\n            unit: '',\r\n            icon: 'üìä',\r\n            color: 'purple'\r\n        },\r\n        {\r\n            label: 'Average RTT',\r\n            value: (metrics.average_rtt || 0).toFixed(2),\r\n            unit: 'ms',\r\n            icon: '‚è±Ô∏è',\r\n            color: 'orange'\r\n        },\r\n        {\r\n            label: 'Data Transferred',\r\n            value: formatBytes(metrics.total_bytes_transferred || 0),\r\n            unit: '',\r\n            icon: 'üíæ',\r\n            color: 'teal'\r\n        }\r\n    ];\r\n\r\n    return (\r\n        <div className=\"network-stats\">\r\n            <h3>Network Statistics</h3>\r\n            <div className=\"stats-grid\">\r\n                {stats.map((stat, index) => (\r\n                    <div key={index} className={`stat-item ${stat.color}`}>\r\n                        <div className=\"stat-icon\">{stat.icon}</div>\r\n                        <div className=\"stat-content\">\r\n                            <div className=\"stat-value\">\r\n                                {stat.value}\r\n                                {stat.unit && <span className=\"stat-unit\">{stat.unit}</span>}\r\n                            </div>\r\n                            <div className=\"stat-label\">{stat.label}</div>\r\n                            {stat.detail && <div className=\"stat-detail\">{stat.detail}</div>}\r\n                        </div>\r\n                    </div>\r\n                ))}\r\n            </div>\r\n            \r\n            {/* Real-time indicator */}\r\n            <div className=\"real-time-indicator\">\r\n                <span className=\"pulse-dot\"></span>\r\n                <span>Real-time updates</span>\r\n                <small>Last updated: {new Date().toLocaleTimeString()}</small>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\n// Utility functions\r\nconst formatBytes = (bytes) => {\r\n    if (bytes === 0) return '0 B';\r\n    const k = 1024;\r\n    const sizes = ['B', 'KB', 'MB', 'GB', 'TB'];\r\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\r\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(1)) + ' ' + sizes[i];\r\n};\r\n\r\nconst formatBandwidth = (bytesPerSec) => {\r\n    if (bytesPerSec === 0) return '0 B/s';\r\n    const k = 1024;\r\n    const sizes = ['B/s', 'KB/s', 'MB/s', 'GB/s'];\r\n    const i = Math.floor(Math.log(bytesPerSec) / Math.log(k));\r\n    return parseFloat((bytesPerSec / Math.pow(k, i)).toFixed(1)) + ' ' + sizes[i];\r\n};\r\n\r\nexport default NetworkStats;"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,YAAY,GAAGA,CAAC;EAAEC;AAAQ,CAAC,KAAK;EAClC,IAAI,CAACA,OAAO,EAAE;IACV,oBACIF,OAAA;MAAKG,SAAS,EAAC,uBAAuB;MAAAC,QAAA,gBAClCJ,OAAA;QAAAI,QAAA,EAAI;MAAkB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAC3BR,OAAA;QAAAI,QAAA,EAAG;MAAqB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC3B,CAAC;EAEd;EAEA,MAAMC,KAAK,GAAG,CACV;IACIC,KAAK,EAAE,oBAAoB;IAC3BC,KAAK,EAAET,OAAO,CAACU,kBAAkB,IAAI,CAAC;IACtCC,IAAI,EAAE,EAAE;IACRC,IAAI,EAAE,IAAI;IACVC,KAAK,EAAE,MAAM;IACbC,MAAM,EAAE,SAASd,OAAO,CAACe,gBAAgB,IAAI,CAAC,WAAWf,OAAO,CAACgB,gBAAgB,IAAI,CAAC;EAC1F,CAAC,EACD;IACIR,KAAK,EAAE,gBAAgB;IACvBC,KAAK,EAAET,OAAO,CAACgB,gBAAgB,IAAI,CAAC;IACpCL,IAAI,EAAE,EAAE;IACRC,IAAI,EAAE,IAAI;IACVC,KAAK,EAAE,OAAO;IACdC,MAAM,EAAE;EACZ,CAAC,EACD;IACIN,KAAK,EAAE,kBAAkB;IACzBC,KAAK,EAAET,OAAO,CAACe,gBAAgB,IAAI,CAAC;IACpCJ,IAAI,EAAE,EAAE;IACRC,IAAI,EAAE,IAAI;IACVC,KAAK,EAAE,MAAM;IACbC,MAAM,EAAE;EACZ,CAAC,EACD;IACIN,KAAK,EAAE,iBAAiB;IACxBC,KAAK,EAAEQ,eAAe,CAACjB,OAAO,CAACkB,eAAe,IAAI,CAAC,CAAC;IACpDP,IAAI,EAAE,EAAE;IACRC,IAAI,EAAE,IAAI;IACVC,KAAK,EAAE;EACX,CAAC,EACD;IACIL,KAAK,EAAE,aAAa;IACpBC,KAAK,EAAE,CAACT,OAAO,CAACmB,WAAW,IAAI,CAAC,EAAEC,OAAO,CAAC,CAAC,CAAC;IAC5CT,IAAI,EAAE,IAAI;IACVC,IAAI,EAAE,IAAI;IACVC,KAAK,EAAE;EACX,CAAC,EACD;IACIL,KAAK,EAAE,kBAAkB;IACzBC,KAAK,EAAEY,WAAW,CAACrB,OAAO,CAACsB,uBAAuB,IAAI,CAAC,CAAC;IACxDX,IAAI,EAAE,EAAE;IACRC,IAAI,EAAE,IAAI;IACVC,KAAK,EAAE;EACX,CAAC,CACJ;EAED,oBACIf,OAAA;IAAKG,SAAS,EAAC,eAAe;IAAAC,QAAA,gBAC1BJ,OAAA;MAAAI,QAAA,EAAI;IAAkB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC3BR,OAAA;MAAKG,SAAS,EAAC,YAAY;MAAAC,QAAA,EACtBK,KAAK,CAACgB,GAAG,CAAC,CAACC,IAAI,EAAEC,KAAK,kBACnB3B,OAAA;QAAiBG,SAAS,EAAE,aAAauB,IAAI,CAACX,KAAK,EAAG;QAAAX,QAAA,gBAClDJ,OAAA;UAAKG,SAAS,EAAC,WAAW;UAAAC,QAAA,EAAEsB,IAAI,CAACZ;QAAI;UAAAT,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAM,CAAC,eAC5CR,OAAA;UAAKG,SAAS,EAAC,cAAc;UAAAC,QAAA,gBACzBJ,OAAA;YAAKG,SAAS,EAAC,YAAY;YAAAC,QAAA,GACtBsB,IAAI,CAACf,KAAK,EACVe,IAAI,CAACb,IAAI,iBAAIb,OAAA;cAAMG,SAAS,EAAC,WAAW;cAAAC,QAAA,EAAEsB,IAAI,CAACb;YAAI;cAAAR,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAO,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAC3D,CAAC,eACNR,OAAA;YAAKG,SAAS,EAAC,YAAY;YAAAC,QAAA,EAAEsB,IAAI,CAAChB;UAAK;YAAAL,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAM,CAAC,EAC7CkB,IAAI,CAACV,MAAM,iBAAIhB,OAAA;YAAKG,SAAS,EAAC,aAAa;YAAAC,QAAA,EAAEsB,IAAI,CAACV;UAAM;YAAAX,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAM,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC/D,CAAC;MAAA,GATAmB,KAAK;QAAAtB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAUV,CACR;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACD,CAAC,eAGNR,OAAA;MAAKG,SAAS,EAAC,qBAAqB;MAAAC,QAAA,gBAChCJ,OAAA;QAAMG,SAAS,EAAC;MAAW;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAO,CAAC,eACnCR,OAAA;QAAAI,QAAA,EAAM;MAAiB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC,eAC9BR,OAAA;QAAAI,QAAA,GAAO,gBAAc,EAAC,IAAIwB,IAAI,CAAC,CAAC,CAACC,kBAAkB,CAAC,CAAC;MAAA;QAAAxB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC7D,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEd,CAAC;;AAED;AAAAsB,EAAA,GAvFM7B,YAAY;AAwFlB,MAAMsB,WAAW,GAAIQ,KAAK,IAAK;EAC3B,IAAIA,KAAK,KAAK,CAAC,EAAE,OAAO,KAAK;EAC7B,MAAMC,CAAC,GAAG,IAAI;EACd,MAAMC,KAAK,GAAG,CAAC,GAAG,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC;EAC3C,MAAMC,CAAC,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,GAAG,CAACN,KAAK,CAAC,GAAGI,IAAI,CAACE,GAAG,CAACL,CAAC,CAAC,CAAC;EACnD,OAAOM,UAAU,CAAC,CAACP,KAAK,GAAGI,IAAI,CAACI,GAAG,CAACP,CAAC,EAAEE,CAAC,CAAC,EAAEZ,OAAO,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,GAAGW,KAAK,CAACC,CAAC,CAAC;AAC3E,CAAC;AAED,MAAMf,eAAe,GAAIqB,WAAW,IAAK;EACrC,IAAIA,WAAW,KAAK,CAAC,EAAE,OAAO,OAAO;EACrC,MAAMR,CAAC,GAAG,IAAI;EACd,MAAMC,KAAK,GAAG,CAAC,KAAK,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,CAAC;EAC7C,MAAMC,CAAC,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,GAAG,CAACG,WAAW,CAAC,GAAGL,IAAI,CAACE,GAAG,CAACL,CAAC,CAAC,CAAC;EACzD,OAAOM,UAAU,CAAC,CAACE,WAAW,GAAGL,IAAI,CAACI,GAAG,CAACP,CAAC,EAAEE,CAAC,CAAC,EAAEZ,OAAO,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,GAAGW,KAAK,CAACC,CAAC,CAAC;AACjF,CAAC;AAED,eAAejC,YAAY;AAAC,IAAA6B,EAAA;AAAAW,YAAA,CAAAX,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}