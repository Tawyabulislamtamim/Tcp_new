{"ast":null,"code":"class APIService {\n  constructor() {\n    this.baseURL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\n  }\n  async downloadFile(path, onProgress) {\n    try {\n      const response = await fetch(`${this.baseURL}/transfer/download?path=${encodeURIComponent(path)}`);\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const contentLength = response.headers.get('content-length');\n      const total = parseInt(contentLength, 10);\n      let loaded = 0;\n      const reader = response.body.getReader();\n      const chunks = [];\n      while (true) {\n        const {\n          done,\n          value\n        } = await reader.read();\n        if (done) break;\n        chunks.push(value);\n        loaded += value.length;\n        if (onProgress && total) {\n          onProgress(loaded / total);\n        }\n      }\n      return new Blob(chunks);\n    } catch (error) {\n      throw new Error(`Failed to download file: ${error.message}`);\n    }\n  }\n}\nexport default new APIService();","map":{"version":3,"names":["APIService","constructor","baseURL","process","env","REACT_APP_API_URL","downloadFile","path","onProgress","response","fetch","encodeURIComponent","ok","Error","status","contentLength","headers","get","total","parseInt","loaded","reader","body","getReader","chunks","done","value","read","push","length","Blob","error","message"],"sources":["C:/Users/iamov/Desktop/Net/tcp-file-transfer/tcp-file-transfer/frontend/src/services/api.js"],"sourcesContent":["class APIService {\r\n    constructor() {\r\n        this.baseURL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\r\n    }\r\n\r\n    async downloadFile(path, onProgress) {\r\n        try {\r\n            const response = await fetch(`${this.baseURL}/transfer/download?path=${encodeURIComponent(path)}`);\r\n            \r\n            if (!response.ok) {\r\n                throw new Error(`HTTP error! status: ${response.status}`);\r\n            }\r\n\r\n            const contentLength = response.headers.get('content-length');\r\n            const total = parseInt(contentLength, 10);\r\n            let loaded = 0;\r\n\r\n            const reader = response.body.getReader();\r\n            const chunks = [];\r\n\r\n            while (true) {\r\n                const { done, value } = await reader.read();\r\n                \r\n                if (done) break;\r\n                \r\n                chunks.push(value);\r\n                loaded += value.length;\r\n                \r\n                if (onProgress && total) {\r\n                    onProgress(loaded / total);\r\n                }\r\n            }\r\n\r\n            return new Blob(chunks);\r\n        } catch (error) {\r\n            throw new Error(`Failed to download file: ${error.message}`);\r\n        }\r\n    }\r\n}\r\n\r\nexport default new APIService();"],"mappings":"AAAA,MAAMA,UAAU,CAAC;EACbC,WAAWA,CAAA,EAAG;IACV,IAAI,CAACC,OAAO,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,2BAA2B;EAC/E;EAEA,MAAMC,YAAYA,CAACC,IAAI,EAAEC,UAAU,EAAE;IACjC,IAAI;MACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAG,IAAI,CAACR,OAAO,2BAA2BS,kBAAkB,CAACJ,IAAI,CAAC,EAAE,CAAC;MAElG,IAAI,CAACE,QAAQ,CAACG,EAAE,EAAE;QACd,MAAM,IAAIC,KAAK,CAAC,uBAAuBJ,QAAQ,CAACK,MAAM,EAAE,CAAC;MAC7D;MAEA,MAAMC,aAAa,GAAGN,QAAQ,CAACO,OAAO,CAACC,GAAG,CAAC,gBAAgB,CAAC;MAC5D,MAAMC,KAAK,GAAGC,QAAQ,CAACJ,aAAa,EAAE,EAAE,CAAC;MACzC,IAAIK,MAAM,GAAG,CAAC;MAEd,MAAMC,MAAM,GAAGZ,QAAQ,CAACa,IAAI,CAACC,SAAS,CAAC,CAAC;MACxC,MAAMC,MAAM,GAAG,EAAE;MAEjB,OAAO,IAAI,EAAE;QACT,MAAM;UAAEC,IAAI;UAAEC;QAAM,CAAC,GAAG,MAAML,MAAM,CAACM,IAAI,CAAC,CAAC;QAE3C,IAAIF,IAAI,EAAE;QAEVD,MAAM,CAACI,IAAI,CAACF,KAAK,CAAC;QAClBN,MAAM,IAAIM,KAAK,CAACG,MAAM;QAEtB,IAAIrB,UAAU,IAAIU,KAAK,EAAE;UACrBV,UAAU,CAACY,MAAM,GAAGF,KAAK,CAAC;QAC9B;MACJ;MAEA,OAAO,IAAIY,IAAI,CAACN,MAAM,CAAC;IAC3B,CAAC,CAAC,OAAOO,KAAK,EAAE;MACZ,MAAM,IAAIlB,KAAK,CAAC,4BAA4BkB,KAAK,CAACC,OAAO,EAAE,CAAC;IAChE;EACJ;AACJ;AAEA,eAAe,IAAIhC,UAAU,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}