{"ast":null,"code":"import api from './api';\nconst metricsService = {\n  async getGlobalMetrics() {\n    // Use APIService to fetch global metrics\n    try {\n      return await api.getGlobalMetrics();\n    } catch (error) {\n      throw new Error(error.message || 'Failed to fetch global metrics');\n    }\n  },\n  async getClientMetrics(clientId) {\n    // Use APIService to fetch client-specific metrics\n    try {\n      return await api.getClientMetrics(clientId);\n    } catch (error) {\n      throw new Error(error.message || 'Failed to fetch client metrics');\n    }\n  },\n  async getMetricsHistory(seconds = 30) {\n    // Use APIService to fetch metrics history\n    try {\n      return await api.getMetricsHistory(seconds);\n    } catch (error) {\n      throw new Error(error.message || 'Failed to fetch metrics history');\n    }\n  },\n  subscribeToMetrics(callback) {\n    const baseURL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\n    const eventSource = new EventSource(`${baseURL}/metrics/stream`);\n    eventSource.onmessage = event => {\n      try {\n        const data = JSON.parse(event.data);\n        callback(data);\n      } catch (err) {\n        console.error('Error parsing SSE data:', err);\n      }\n    };\n    eventSource.onerror = err => {\n      console.error('SSE error:', err);\n      eventSource.close();\n    };\n    return () => eventSource.close();\n  }\n};\nexport default metricsService;","map":{"version":3,"names":["api","metricsService","getGlobalMetrics","error","Error","message","getClientMetrics","clientId","getMetricsHistory","seconds","subscribeToMetrics","callback","baseURL","process","env","REACT_APP_API_URL","eventSource","EventSource","onmessage","event","data","JSON","parse","err","console","onerror","close"],"sources":["D:/Tawyabul Islam Tamim/3-1/computer networking/project/tcp-file-transfer/tcp-file-transfer/frontend/src/services/metricsService.js"],"sourcesContent":["import api from './api';\r\n\r\nconst metricsService = {\r\n    async getGlobalMetrics() {\r\n        // Use APIService to fetch global metrics\r\n        try {\r\n            return await api.getGlobalMetrics();\r\n        } catch (error) {\r\n            throw new Error(error.message || 'Failed to fetch global metrics');\r\n        }\r\n    },\r\n\r\n    async getClientMetrics(clientId) {\r\n        // Use APIService to fetch client-specific metrics\r\n        try {\r\n            return await api.getClientMetrics(clientId);\r\n        } catch (error) {\r\n            throw new Error(error.message || 'Failed to fetch client metrics');\r\n        }\r\n    },\r\n\r\n    async getMetricsHistory(seconds = 30) {\r\n        // Use APIService to fetch metrics history\r\n        try {\r\n            return await api.getMetricsHistory(seconds);\r\n        } catch (error) {\r\n            throw new Error(error.message || 'Failed to fetch metrics history');\r\n        }\r\n    },\r\n\r\n    subscribeToMetrics(callback) {\r\n        const baseURL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\r\n        const eventSource = new EventSource(`${baseURL}/metrics/stream`);\r\n        \r\n        eventSource.onmessage = (event) => {\r\n            try {\r\n                const data = JSON.parse(event.data);\r\n                callback(data);\r\n            } catch (err) {\r\n                console.error('Error parsing SSE data:', err);\r\n            }\r\n        };\r\n\r\n        eventSource.onerror = (err) => {\r\n            console.error('SSE error:', err);\r\n            eventSource.close();\r\n        };\r\n\r\n        return () => eventSource.close();\r\n    }\r\n};\r\n\r\nexport default metricsService;"],"mappings":"AAAA,OAAOA,GAAG,MAAM,OAAO;AAEvB,MAAMC,cAAc,GAAG;EACnB,MAAMC,gBAAgBA,CAAA,EAAG;IACrB;IACA,IAAI;MACA,OAAO,MAAMF,GAAG,CAACE,gBAAgB,CAAC,CAAC;IACvC,CAAC,CAAC,OAAOC,KAAK,EAAE;MACZ,MAAM,IAAIC,KAAK,CAACD,KAAK,CAACE,OAAO,IAAI,gCAAgC,CAAC;IACtE;EACJ,CAAC;EAED,MAAMC,gBAAgBA,CAACC,QAAQ,EAAE;IAC7B;IACA,IAAI;MACA,OAAO,MAAMP,GAAG,CAACM,gBAAgB,CAACC,QAAQ,CAAC;IAC/C,CAAC,CAAC,OAAOJ,KAAK,EAAE;MACZ,MAAM,IAAIC,KAAK,CAACD,KAAK,CAACE,OAAO,IAAI,gCAAgC,CAAC;IACtE;EACJ,CAAC;EAED,MAAMG,iBAAiBA,CAACC,OAAO,GAAG,EAAE,EAAE;IAClC;IACA,IAAI;MACA,OAAO,MAAMT,GAAG,CAACQ,iBAAiB,CAACC,OAAO,CAAC;IAC/C,CAAC,CAAC,OAAON,KAAK,EAAE;MACZ,MAAM,IAAIC,KAAK,CAACD,KAAK,CAACE,OAAO,IAAI,iCAAiC,CAAC;IACvE;EACJ,CAAC;EAEDK,kBAAkBA,CAACC,QAAQ,EAAE;IACzB,MAAMC,OAAO,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,2BAA2B;IAC5E,MAAMC,WAAW,GAAG,IAAIC,WAAW,CAAC,GAAGL,OAAO,iBAAiB,CAAC;IAEhEI,WAAW,CAACE,SAAS,GAAIC,KAAK,IAAK;MAC/B,IAAI;QACA,MAAMC,IAAI,GAAGC,IAAI,CAACC,KAAK,CAACH,KAAK,CAACC,IAAI,CAAC;QACnCT,QAAQ,CAACS,IAAI,CAAC;MAClB,CAAC,CAAC,OAAOG,GAAG,EAAE;QACVC,OAAO,CAACrB,KAAK,CAAC,yBAAyB,EAAEoB,GAAG,CAAC;MACjD;IACJ,CAAC;IAEDP,WAAW,CAACS,OAAO,GAAIF,GAAG,IAAK;MAC3BC,OAAO,CAACrB,KAAK,CAAC,YAAY,EAAEoB,GAAG,CAAC;MAChCP,WAAW,CAACU,KAAK,CAAC,CAAC;IACvB,CAAC;IAED,OAAO,MAAMV,WAAW,CAACU,KAAK,CAAC,CAAC;EACpC;AACJ,CAAC;AAED,eAAezB,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}