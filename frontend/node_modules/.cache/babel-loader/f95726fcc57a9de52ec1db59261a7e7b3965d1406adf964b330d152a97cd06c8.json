{"ast":null,"code":"import api from './api';\nconst metricsService = {\n  async getGlobalMetrics() {\n    try {\n      const response = await api.get('/metrics/global');\n      return response.data;\n    } catch (error) {\n      var _error$response, _error$response$data;\n      throw new Error(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.error) || 'Failed to fetch global metrics');\n    }\n  },\n  async getClientMetrics(clientId) {\n    try {\n      var _response$data$metric;\n      const response = await api.get(`/metrics/client/${clientId}`);\n      return ((_response$data$metric = response.data.metrics) === null || _response$data$metric === void 0 ? void 0 : _response$data$metric[0]) || null;\n    } catch (error) {\n      var _error$response2, _error$response2$data;\n      throw new Error(((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.error) || 'Failed to fetch client metrics');\n    }\n  },\n  async getMetricsHistory(seconds = 30) {\n    try {\n      const response = await api.get('/metrics/history', {\n        params: {\n          seconds\n        }\n      });\n      return response.data.metrics;\n    } catch (error) {\n      var _error$response3, _error$response3$data;\n      throw new Error(((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.error) || 'Failed to fetch metrics history');\n    }\n  },\n  subscribeToMetrics(callback) {\n    const baseURL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\n    const eventSource = new EventSource(`${baseURL}/metrics/stream`);\n    eventSource.onmessage = event => {\n      try {\n        const data = JSON.parse(event.data);\n        callback(data);\n      } catch (err) {\n        console.error('Error parsing SSE data:', err);\n      }\n    };\n    eventSource.onerror = err => {\n      console.error('SSE error:', err);\n      eventSource.close();\n    };\n    return () => eventSource.close();\n  }\n};\nexport default metricsService;","map":{"version":3,"names":["api","metricsService","getGlobalMetrics","response","get","data","error","_error$response","_error$response$data","Error","getClientMetrics","clientId","_response$data$metric","metrics","_error$response2","_error$response2$data","getMetricsHistory","seconds","params","_error$response3","_error$response3$data","subscribeToMetrics","callback","baseURL","process","env","REACT_APP_API_URL","eventSource","EventSource","onmessage","event","JSON","parse","err","console","onerror","close"],"sources":["C:/Users/iamov/Desktop/Net/tcp-file-transfer/tcp-file-transfer/frontend/src/services/metricsService.js"],"sourcesContent":["import api from './api';\r\n\r\nconst metricsService = {\r\n    async getGlobalMetrics() {\r\n        try {\r\n            const response = await api.get('/metrics/global');\r\n            return response.data;\r\n        } catch (error) {\r\n            throw new Error(error.response?.data?.error || 'Failed to fetch global metrics');\r\n        }\r\n    },\r\n\r\n    async getClientMetrics(clientId) {\r\n        try {\r\n            const response = await api.get(`/metrics/client/${clientId}`);\r\n            return response.data.metrics?.[0] || null;\r\n        } catch (error) {\r\n            throw new Error(error.response?.data?.error || 'Failed to fetch client metrics');\r\n        }\r\n    },\r\n\r\n    async getMetricsHistory(seconds = 30) {\r\n        try {\r\n            const response = await api.get('/metrics/history', { params: { seconds } });\r\n            return response.data.metrics;\r\n        } catch (error) {\r\n            throw new Error(error.response?.data?.error || 'Failed to fetch metrics history');\r\n        }\r\n    },\r\n\r\n    subscribeToMetrics(callback) {\r\n        const baseURL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\r\n        const eventSource = new EventSource(`${baseURL}/metrics/stream`);\r\n        \r\n        eventSource.onmessage = (event) => {\r\n            try {\r\n                const data = JSON.parse(event.data);\r\n                callback(data);\r\n            } catch (err) {\r\n                console.error('Error parsing SSE data:', err);\r\n            }\r\n        };\r\n\r\n        eventSource.onerror = (err) => {\r\n            console.error('SSE error:', err);\r\n            eventSource.close();\r\n        };\r\n\r\n        return () => eventSource.close();\r\n    }\r\n};\r\n\r\nexport default metricsService;"],"mappings":"AAAA,OAAOA,GAAG,MAAM,OAAO;AAEvB,MAAMC,cAAc,GAAG;EACnB,MAAMC,gBAAgBA,CAAA,EAAG;IACrB,IAAI;MACA,MAAMC,QAAQ,GAAG,MAAMH,GAAG,CAACI,GAAG,CAAC,iBAAiB,CAAC;MACjD,OAAOD,QAAQ,CAACE,IAAI;IACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;MAAA,IAAAC,eAAA,EAAAC,oBAAA;MACZ,MAAM,IAAIC,KAAK,CAAC,EAAAF,eAAA,GAAAD,KAAK,CAACH,QAAQ,cAAAI,eAAA,wBAAAC,oBAAA,GAAdD,eAAA,CAAgBF,IAAI,cAAAG,oBAAA,uBAApBA,oBAAA,CAAsBF,KAAK,KAAI,gCAAgC,CAAC;IACpF;EACJ,CAAC;EAED,MAAMI,gBAAgBA,CAACC,QAAQ,EAAE;IAC7B,IAAI;MAAA,IAAAC,qBAAA;MACA,MAAMT,QAAQ,GAAG,MAAMH,GAAG,CAACI,GAAG,CAAC,mBAAmBO,QAAQ,EAAE,CAAC;MAC7D,OAAO,EAAAC,qBAAA,GAAAT,QAAQ,CAACE,IAAI,CAACQ,OAAO,cAAAD,qBAAA,uBAArBA,qBAAA,CAAwB,CAAC,CAAC,KAAI,IAAI;IAC7C,CAAC,CAAC,OAAON,KAAK,EAAE;MAAA,IAAAQ,gBAAA,EAAAC,qBAAA;MACZ,MAAM,IAAIN,KAAK,CAAC,EAAAK,gBAAA,GAAAR,KAAK,CAACH,QAAQ,cAAAW,gBAAA,wBAAAC,qBAAA,GAAdD,gBAAA,CAAgBT,IAAI,cAAAU,qBAAA,uBAApBA,qBAAA,CAAsBT,KAAK,KAAI,gCAAgC,CAAC;IACpF;EACJ,CAAC;EAED,MAAMU,iBAAiBA,CAACC,OAAO,GAAG,EAAE,EAAE;IAClC,IAAI;MACA,MAAMd,QAAQ,GAAG,MAAMH,GAAG,CAACI,GAAG,CAAC,kBAAkB,EAAE;QAAEc,MAAM,EAAE;UAAED;QAAQ;MAAE,CAAC,CAAC;MAC3E,OAAOd,QAAQ,CAACE,IAAI,CAACQ,OAAO;IAChC,CAAC,CAAC,OAAOP,KAAK,EAAE;MAAA,IAAAa,gBAAA,EAAAC,qBAAA;MACZ,MAAM,IAAIX,KAAK,CAAC,EAAAU,gBAAA,GAAAb,KAAK,CAACH,QAAQ,cAAAgB,gBAAA,wBAAAC,qBAAA,GAAdD,gBAAA,CAAgBd,IAAI,cAAAe,qBAAA,uBAApBA,qBAAA,CAAsBd,KAAK,KAAI,iCAAiC,CAAC;IACrF;EACJ,CAAC;EAEDe,kBAAkBA,CAACC,QAAQ,EAAE;IACzB,MAAMC,OAAO,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,2BAA2B;IAC5E,MAAMC,WAAW,GAAG,IAAIC,WAAW,CAAC,GAAGL,OAAO,iBAAiB,CAAC;IAEhEI,WAAW,CAACE,SAAS,GAAIC,KAAK,IAAK;MAC/B,IAAI;QACA,MAAMzB,IAAI,GAAG0B,IAAI,CAACC,KAAK,CAACF,KAAK,CAACzB,IAAI,CAAC;QACnCiB,QAAQ,CAACjB,IAAI,CAAC;MAClB,CAAC,CAAC,OAAO4B,GAAG,EAAE;QACVC,OAAO,CAAC5B,KAAK,CAAC,yBAAyB,EAAE2B,GAAG,CAAC;MACjD;IACJ,CAAC;IAEDN,WAAW,CAACQ,OAAO,GAAIF,GAAG,IAAK;MAC3BC,OAAO,CAAC5B,KAAK,CAAC,YAAY,EAAE2B,GAAG,CAAC;MAChCN,WAAW,CAACS,KAAK,CAAC,CAAC;IACvB,CAAC;IAED,OAAO,MAAMT,WAAW,CAACS,KAAK,CAAC,CAAC;EACpC;AACJ,CAAC;AAED,eAAenC,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}