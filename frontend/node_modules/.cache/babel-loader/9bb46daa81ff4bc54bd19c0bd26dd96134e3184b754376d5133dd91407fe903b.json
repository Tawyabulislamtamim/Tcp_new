{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\iamov\\\\Desktop\\\\Net\\\\New folder\\\\tcp-file-transfer\\\\frontend\\\\src\\\\components\\\\AlgorithmInsights\\\\AlgorithmInsights.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './AlgorithmInsights.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AlgorithmInsights = ({\n  globalMetrics\n}) => {\n  _s();\n  const [algorithmStats, setAlgorithmStats] = useState({});\n  const [networkConditions, setNetworkConditions] = useState([]);\n  useEffect(() => {\n    // Process metrics to show algorithm performance\n    if (globalMetrics && globalMetrics.clients) {\n      const stats = {};\n      const conditions = [];\n      Object.values(globalMetrics.clients).forEach(client => {\n        const algorithm = client.algorithm || 'unknown';\n        if (!stats[algorithm]) {\n          stats[algorithm] = {\n            count: 0,\n            avgRtt: 0,\n            avgBandwidth: 0,\n            packetLoss: 0,\n            condition: 'unknown'\n          };\n        }\n        stats[algorithm].count++;\n        stats[algorithm].avgRtt += client.rtt || 0;\n        stats[algorithm].avgBandwidth += client.bandwidth || 0;\n        stats[algorithm].packetLoss += client.packet_loss || 0;\n        if (client.network_condition) {\n          conditions.push({\n            algorithm,\n            condition: client.network_condition,\n            rtt: client.rtt,\n            bandwidth: client.bandwidth,\n            loss: client.packet_loss,\n            clientId: client.client_id\n          });\n        }\n      });\n\n      // Calculate averages\n      Object.keys(stats).forEach(algo => {\n        const count = stats[algo].count;\n        if (count > 0) {\n          stats[algo].avgRtt /= count;\n          stats[algo].avgBandwidth /= count;\n          stats[algo].packetLoss /= count;\n        }\n      });\n      setAlgorithmStats(stats);\n      setNetworkConditions(conditions);\n    }\n  }, [globalMetrics]);\n  const getAlgorithmInfo = algorithm => {\n    const info = {\n      'reno': {\n        name: 'TCP Reno',\n        icon: '🔄',\n        color: 'blue',\n        description: 'Fast recovery, moderate congestion handling',\n        bestFor: 'General purpose, moderate congestion',\n        research: 'Good balance between performance and fairness'\n      },\n      'cubic': {\n        name: 'TCP CUBIC',\n        icon: '📈',\n        color: 'green',\n        description: 'High-speed, long-distance optimization',\n        bestFor: 'High bandwidth, low loss networks',\n        research: 'Default in Linux, optimized for modern networks'\n      },\n      'tahoe': {\n        name: 'TCP Tahoe',\n        icon: '🛡️',\n        color: 'orange',\n        description: 'Conservative, stable congestion control',\n        bestFor: 'High congestion, frequent packet loss',\n        research: 'Most stable under heavy congestion'\n      },\n      'bbr': {\n        name: 'TCP BBR',\n        icon: '🚀',\n        color: 'purple',\n        description: 'Bandwidth-based, loss-resistant',\n        bestFor: 'Wireless, lossy networks',\n        research: 'Maintains throughput under random loss'\n      }\n    };\n    return info[algorithm] || {\n      name: algorithm.toUpperCase(),\n      icon: '❓',\n      color: 'gray',\n      description: 'Unknown algorithm',\n      bestFor: 'Unknown',\n      research: 'No data available'\n    };\n  };\n  const getConditionBadge = condition => {\n    const badges = {\n      'excellent': {\n        text: 'Excellent',\n        color: 'green',\n        icon: '✨'\n      },\n      'good': {\n        text: 'Good',\n        color: 'blue',\n        icon: '👍'\n      },\n      'congested': {\n        text: 'Congested',\n        color: 'orange',\n        icon: '⚠️'\n      },\n      'lossy': {\n        text: 'Lossy',\n        color: 'red',\n        icon: '📡'\n      },\n      'high_bw': {\n        text: 'High BW',\n        color: 'purple',\n        icon: '🏎️'\n      }\n    };\n    return badges[condition] || {\n      text: condition,\n      color: 'gray',\n      icon: '❓'\n    };\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"algorithm-insights\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"\\uD83E\\uDDE0 Intelligent TCP Algorithm Selection\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"insights-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"\\uD83D\\uDCCA Active Algorithms\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"algorithm-grid\",\n        children: Object.entries(algorithmStats).map(([algorithm, stats]) => {\n          const info = getAlgorithmInfo(algorithm);\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `algorithm-card ${info.color}`,\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"algorithm-header\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"algorithm-icon\",\n                children: info.icon\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 126,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"algorithm-name\",\n                children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n                  children: info.name\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 128,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"algorithm-count\",\n                  children: [stats.count, \" connections\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 129,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 127,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 125,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"algorithm-metrics\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"metric\",\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"metric-label\",\n                  children: \"Avg RTT:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 135,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"metric-value\",\n                  children: [stats.avgRtt.toFixed(1), \"ms\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 136,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 134,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"metric\",\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"metric-label\",\n                  children: \"Bandwidth:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 139,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"metric-value\",\n                  children: [(stats.avgBandwidth / 1024 / 1024).toFixed(1), \"MB/s\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 140,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 138,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"metric\",\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"metric-label\",\n                  children: \"Loss Rate:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 143,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"metric-value\",\n                  children: [(stats.packetLoss * 100).toFixed(2), \"%\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 144,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 142,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 133,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"algorithm-info\",\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"best-for\",\n                children: info.bestFor\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 149,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"research-note\",\n                children: info.research\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 150,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 148,\n              columnNumber: 33\n            }, this)]\n          }, algorithm, true, {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 29\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"insights-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"\\uD83C\\uDF10 Network Conditions & Algorithm Switching\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"conditions-list\",\n        children: networkConditions.map((item, index) => {\n          var _item$rtt;\n          const badge = getConditionBadge(item.condition);\n          const info = getAlgorithmInfo(item.algorithm);\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"condition-item\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"condition-header\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: `condition-badge ${badge.color}`,\n                children: [badge.icon, \" \", badge.text]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 168,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: `algorithm-badge ${info.color}`,\n                children: [info.icon, \" \", info.name]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 171,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 167,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"condition-details\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                children: [\"RTT: \", (_item$rtt = item.rtt) === null || _item$rtt === void 0 ? void 0 : _item$rtt.toFixed(1), \"ms\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 177,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                children: [\"BW: \", ((item.bandwidth || 0) / 1024 / 1024).toFixed(1), \"MB/s\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 178,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                children: [\"Loss: \", ((item.loss || 0) * 100).toFixed(2), \"%\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 179,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 176,\n              columnNumber: 33\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 166,\n            columnNumber: 29\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"insights-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"\\uD83D\\uDD2C Research-Based Switching Logic\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"research-info\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"switching-rule\",\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"High Loss (>2%) + Low RTT:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 191,\n            columnNumber: 25\n          }, this), \" \\u2192 Reno (fast recovery)\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"switching-rule\",\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"High Loss (>2%) + High RTT:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 194,\n            columnNumber: 25\n          }, this), \" \\u2192 Tahoe (stability)\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"switching-rule\",\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"High BDP (BW\\xD7RTT > 1000):\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 197,\n            columnNumber: 25\n          }, this), \" \\u2192 CUBIC (long fat networks)\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"switching-rule\",\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Wireless/Random Loss (0.1%-1%):\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 200,\n            columnNumber: 25\n          }, this), \" \\u2192 BBR (loss tolerance)\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"switching-rule\",\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Low Loss + Low RTT:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 203,\n            columnNumber: 25\n          }, this), \" \\u2192 CUBIC (high throughput)\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 115,\n    columnNumber: 9\n  }, this);\n};\n_s(AlgorithmInsights, \"J+/rbDY+/w5FDEcCZ7Ab7FMWrUg=\");\n_c = AlgorithmInsights;\nexport default AlgorithmInsights;\nvar _c;\n$RefreshReg$(_c, \"AlgorithmInsights\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","AlgorithmInsights","globalMetrics","_s","algorithmStats","setAlgorithmStats","networkConditions","setNetworkConditions","clients","stats","conditions","Object","values","forEach","client","algorithm","count","avgRtt","avgBandwidth","packetLoss","condition","rtt","bandwidth","packet_loss","network_condition","push","loss","clientId","client_id","keys","algo","getAlgorithmInfo","info","name","icon","color","description","bestFor","research","toUpperCase","getConditionBadge","badges","text","className","children","fileName","_jsxFileName","lineNumber","columnNumber","entries","map","toFixed","item","index","_item$rtt","badge","_c","$RefreshReg$"],"sources":["C:/Users/iamov/Desktop/Net/New folder/tcp-file-transfer/frontend/src/components/AlgorithmInsights/AlgorithmInsights.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport './AlgorithmInsights.css';\r\n\r\nconst AlgorithmInsights = ({ globalMetrics }) => {\r\n    const [algorithmStats, setAlgorithmStats] = useState({});\r\n    const [networkConditions, setNetworkConditions] = useState([]);\r\n\r\n    useEffect(() => {\r\n        // Process metrics to show algorithm performance\r\n        if (globalMetrics && globalMetrics.clients) {\r\n            const stats = {};\r\n            const conditions = [];\r\n            \r\n            Object.values(globalMetrics.clients).forEach(client => {\r\n                const algorithm = client.algorithm || 'unknown';\r\n                if (!stats[algorithm]) {\r\n                    stats[algorithm] = {\r\n                        count: 0,\r\n                        avgRtt: 0,\r\n                        avgBandwidth: 0,\r\n                        packetLoss: 0,\r\n                        condition: 'unknown'\r\n                    };\r\n                }\r\n                \r\n                stats[algorithm].count++;\r\n                stats[algorithm].avgRtt += client.rtt || 0;\r\n                stats[algorithm].avgBandwidth += client.bandwidth || 0;\r\n                stats[algorithm].packetLoss += client.packet_loss || 0;\r\n                \r\n                if (client.network_condition) {\r\n                    conditions.push({\r\n                        algorithm,\r\n                        condition: client.network_condition,\r\n                        rtt: client.rtt,\r\n                        bandwidth: client.bandwidth,\r\n                        loss: client.packet_loss,\r\n                        clientId: client.client_id\r\n                    });\r\n                }\r\n            });\r\n            \r\n            // Calculate averages\r\n            Object.keys(stats).forEach(algo => {\r\n                const count = stats[algo].count;\r\n                if (count > 0) {\r\n                    stats[algo].avgRtt /= count;\r\n                    stats[algo].avgBandwidth /= count;\r\n                    stats[algo].packetLoss /= count;\r\n                }\r\n            });\r\n            \r\n            setAlgorithmStats(stats);\r\n            setNetworkConditions(conditions);\r\n        }\r\n    }, [globalMetrics]);\r\n\r\n    const getAlgorithmInfo = (algorithm) => {\r\n        const info = {\r\n            'reno': {\r\n                name: 'TCP Reno',\r\n                icon: '🔄',\r\n                color: 'blue',\r\n                description: 'Fast recovery, moderate congestion handling',\r\n                bestFor: 'General purpose, moderate congestion',\r\n                research: 'Good balance between performance and fairness'\r\n            },\r\n            'cubic': {\r\n                name: 'TCP CUBIC',\r\n                icon: '📈',\r\n                color: 'green',\r\n                description: 'High-speed, long-distance optimization',\r\n                bestFor: 'High bandwidth, low loss networks',\r\n                research: 'Default in Linux, optimized for modern networks'\r\n            },\r\n            'tahoe': {\r\n                name: 'TCP Tahoe',\r\n                icon: '🛡️',\r\n                color: 'orange',\r\n                description: 'Conservative, stable congestion control',\r\n                bestFor: 'High congestion, frequent packet loss',\r\n                research: 'Most stable under heavy congestion'\r\n            },\r\n            'bbr': {\r\n                name: 'TCP BBR',\r\n                icon: '🚀',\r\n                color: 'purple',\r\n                description: 'Bandwidth-based, loss-resistant',\r\n                bestFor: 'Wireless, lossy networks',\r\n                research: 'Maintains throughput under random loss'\r\n            }\r\n        };\r\n        return info[algorithm] || {\r\n            name: algorithm.toUpperCase(),\r\n            icon: '❓',\r\n            color: 'gray',\r\n            description: 'Unknown algorithm',\r\n            bestFor: 'Unknown',\r\n            research: 'No data available'\r\n        };\r\n    };\r\n\r\n    const getConditionBadge = (condition) => {\r\n        const badges = {\r\n            'excellent': { text: 'Excellent', color: 'green', icon: '✨' },\r\n            'good': { text: 'Good', color: 'blue', icon: '👍' },\r\n            'congested': { text: 'Congested', color: 'orange', icon: '⚠️' },\r\n            'lossy': { text: 'Lossy', color: 'red', icon: '📡' },\r\n            'high_bw': { text: 'High BW', color: 'purple', icon: '🏎️' }\r\n        };\r\n        return badges[condition] || { text: condition, color: 'gray', icon: '❓' };\r\n    };\r\n\r\n    return (\r\n        <div className=\"algorithm-insights\">\r\n            <h3>🧠 Intelligent TCP Algorithm Selection</h3>\r\n            \r\n            <div className=\"insights-section\">\r\n                <h4>📊 Active Algorithms</h4>\r\n                <div className=\"algorithm-grid\">\r\n                    {Object.entries(algorithmStats).map(([algorithm, stats]) => {\r\n                        const info = getAlgorithmInfo(algorithm);\r\n                        return (\r\n                            <div key={algorithm} className={`algorithm-card ${info.color}`}>\r\n                                <div className=\"algorithm-header\">\r\n                                    <span className=\"algorithm-icon\">{info.icon}</span>\r\n                                    <div className=\"algorithm-name\">\r\n                                        <h5>{info.name}</h5>\r\n                                        <span className=\"algorithm-count\">{stats.count} connections</span>\r\n                                    </div>\r\n                                </div>\r\n                                \r\n                                <div className=\"algorithm-metrics\">\r\n                                    <div className=\"metric\">\r\n                                        <span className=\"metric-label\">Avg RTT:</span>\r\n                                        <span className=\"metric-value\">{stats.avgRtt.toFixed(1)}ms</span>\r\n                                    </div>\r\n                                    <div className=\"metric\">\r\n                                        <span className=\"metric-label\">Bandwidth:</span>\r\n                                        <span className=\"metric-value\">{(stats.avgBandwidth / 1024 / 1024).toFixed(1)}MB/s</span>\r\n                                    </div>\r\n                                    <div className=\"metric\">\r\n                                        <span className=\"metric-label\">Loss Rate:</span>\r\n                                        <span className=\"metric-value\">{(stats.packetLoss * 100).toFixed(2)}%</span>\r\n                                    </div>\r\n                                </div>\r\n                                \r\n                                <div className=\"algorithm-info\">\r\n                                    <p className=\"best-for\">{info.bestFor}</p>\r\n                                    <p className=\"research-note\">{info.research}</p>\r\n                                </div>\r\n                            </div>\r\n                        );\r\n                    })}\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"insights-section\">\r\n                <h4>🌐 Network Conditions & Algorithm Switching</h4>\r\n                <div className=\"conditions-list\">\r\n                    {networkConditions.map((item, index) => {\r\n                        const badge = getConditionBadge(item.condition);\r\n                        const info = getAlgorithmInfo(item.algorithm);\r\n                        \r\n                        return (\r\n                            <div key={index} className=\"condition-item\">\r\n                                <div className=\"condition-header\">\r\n                                    <span className={`condition-badge ${badge.color}`}>\r\n                                        {badge.icon} {badge.text}\r\n                                    </span>\r\n                                    <span className={`algorithm-badge ${info.color}`}>\r\n                                        {info.icon} {info.name}\r\n                                    </span>\r\n                                </div>\r\n                                \r\n                                <div className=\"condition-details\">\r\n                                    <span>RTT: {item.rtt?.toFixed(1)}ms</span>\r\n                                    <span>BW: {((item.bandwidth || 0) / 1024 / 1024).toFixed(1)}MB/s</span>\r\n                                    <span>Loss: {((item.loss || 0) * 100).toFixed(2)}%</span>\r\n                                </div>\r\n                            </div>\r\n                        );\r\n                    })}\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"insights-section\">\r\n                <h4>🔬 Research-Based Switching Logic</h4>\r\n                <div className=\"research-info\">\r\n                    <div className=\"switching-rule\">\r\n                        <strong>High Loss (&gt;2%) + Low RTT:</strong> → Reno (fast recovery)\r\n                    </div>\r\n                    <div className=\"switching-rule\">\r\n                        <strong>High Loss (&gt;2%) + High RTT:</strong> → Tahoe (stability)\r\n                    </div>\r\n                    <div className=\"switching-rule\">\r\n                        <strong>High BDP (BW×RTT &gt; 1000):</strong> → CUBIC (long fat networks)\r\n                    </div>\r\n                    <div className=\"switching-rule\">\r\n                        <strong>Wireless/Random Loss (0.1%-1%):</strong> → BBR (loss tolerance)\r\n                    </div>\r\n                    <div className=\"switching-rule\">\r\n                        <strong>Low Loss + Low RTT:</strong> → CUBIC (high throughput)\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default AlgorithmInsights;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}