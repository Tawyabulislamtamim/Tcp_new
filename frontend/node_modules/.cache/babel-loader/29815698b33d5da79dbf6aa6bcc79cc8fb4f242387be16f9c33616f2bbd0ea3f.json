{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport metricsService from '../services/metricsService';\nexport const useMetrics = (clientId, refreshInterval = 1000) => {\n  _s();\n  const [metrics, setMetrics] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    let intervalId;\n    const fetchMetrics = async () => {\n      try {\n        setIsLoading(true);\n        const data = clientId ? await metricsService.getClientMetrics(clientId) : await metricsService.getGlobalMetrics();\n        setMetrics(data);\n        setError(null);\n      } catch (err) {\n        setError(err.message);\n        console.error('Failed to fetch metrics:', err);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    // Initial fetch\n    fetchMetrics();\n\n    // Set up polling if refreshInterval is provided\n    if (refreshInterval > 0) {\n      intervalId = setInterval(fetchMetrics, refreshInterval);\n    }\n    return () => {\n      if (intervalId) clearInterval(intervalId);\n    };\n  }, [clientId, refreshInterval]);\n  return {\n    metrics,\n    isLoading,\n    error\n  };\n};\n_s(useMetrics, \"hT4VaDfDEQDYxi1SFqB7z508GJw=\");","map":{"version":3,"names":["useState","useEffect","metricsService","useMetrics","clientId","refreshInterval","_s","metrics","setMetrics","isLoading","setIsLoading","error","setError","intervalId","fetchMetrics","data","getClientMetrics","getGlobalMetrics","err","message","console","setInterval","clearInterval"],"sources":["C:/Users/iamov/Desktop/Net/tcp-file-transfer/tcp-file-transfer/frontend/src/hooks/useMetrics.js"],"sourcesContent":["import { useState, useEffect } from 'react';\r\nimport metricsService from '../services/metricsService';\r\n\r\nexport const useMetrics = (clientId, refreshInterval = 1000) => {\r\n    const [metrics, setMetrics] = useState(null);\r\n    const [isLoading, setIsLoading] = useState(true);\r\n    const [error, setError] = useState(null);\r\n\r\n    useEffect(() => {\r\n        let intervalId;\r\n        \r\n        const fetchMetrics = async () => {\r\n            try {\r\n                setIsLoading(true);\r\n                const data = clientId \r\n                    ? await metricsService.getClientMetrics(clientId) \r\n                    : await metricsService.getGlobalMetrics();\r\n                setMetrics(data);\r\n                setError(null);\r\n            } catch (err) {\r\n                setError(err.message);\r\n                console.error('Failed to fetch metrics:', err);\r\n            } finally {\r\n                setIsLoading(false);\r\n            }\r\n        };\r\n\r\n        // Initial fetch\r\n        fetchMetrics();\r\n        \r\n        // Set up polling if refreshInterval is provided\r\n        if (refreshInterval > 0) {\r\n            intervalId = setInterval(fetchMetrics, refreshInterval);\r\n        }\r\n\r\n        return () => {\r\n            if (intervalId) clearInterval(intervalId);\r\n        };\r\n    }, [clientId, refreshInterval]);\r\n\r\n    return { metrics, isLoading, error };\r\n};"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,OAAOC,cAAc,MAAM,4BAA4B;AAEvD,OAAO,MAAMC,UAAU,GAAGA,CAACC,QAAQ,EAAEC,eAAe,GAAG,IAAI,KAAK;EAAAC,EAAA;EAC5D,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACS,SAAS,EAAEC,YAAY,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EAChD,MAAM,CAACW,KAAK,EAAEC,QAAQ,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;EAExCC,SAAS,CAAC,MAAM;IACZ,IAAIY,UAAU;IAEd,MAAMC,YAAY,GAAG,MAAAA,CAAA,KAAY;MAC7B,IAAI;QACAJ,YAAY,CAAC,IAAI,CAAC;QAClB,MAAMK,IAAI,GAAGX,QAAQ,GACf,MAAMF,cAAc,CAACc,gBAAgB,CAACZ,QAAQ,CAAC,GAC/C,MAAMF,cAAc,CAACe,gBAAgB,CAAC,CAAC;QAC7CT,UAAU,CAACO,IAAI,CAAC;QAChBH,QAAQ,CAAC,IAAI,CAAC;MAClB,CAAC,CAAC,OAAOM,GAAG,EAAE;QACVN,QAAQ,CAACM,GAAG,CAACC,OAAO,CAAC;QACrBC,OAAO,CAACT,KAAK,CAAC,0BAA0B,EAAEO,GAAG,CAAC;MAClD,CAAC,SAAS;QACNR,YAAY,CAAC,KAAK,CAAC;MACvB;IACJ,CAAC;;IAED;IACAI,YAAY,CAAC,CAAC;;IAEd;IACA,IAAIT,eAAe,GAAG,CAAC,EAAE;MACrBQ,UAAU,GAAGQ,WAAW,CAACP,YAAY,EAAET,eAAe,CAAC;IAC3D;IAEA,OAAO,MAAM;MACT,IAAIQ,UAAU,EAAES,aAAa,CAACT,UAAU,CAAC;IAC7C,CAAC;EACL,CAAC,EAAE,CAACT,QAAQ,EAAEC,eAAe,CAAC,CAAC;EAE/B,OAAO;IAAEE,OAAO;IAAEE,SAAS;IAAEE;EAAM,CAAC;AACxC,CAAC;AAACL,EAAA,CAtCWH,UAAU","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}